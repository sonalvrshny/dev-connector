- using postman to hit the endpoints
- using mongoose to interact with the database
- node and express for backend
- UI using react
- redux for state manegement

-----------------------------------------------------------------------------------------------------

Mongo 
- Atlas is the cloud storage for Mongo - easier than locally stored database
- Since we are using Heroku to deploy, it is easier to just connect the cloud
- After logging in, create a project and in that have to create a cluster
- Once the cluster is created, add user and IP address (add your current)
- Connect to the db - Connect your application - will get connection details which is used in express
- mongoose is a package with npm - allows to model data

-----------------------------------------------------------------------------------------------------

Express server for backend
Step 1:
- have to create the package.json file
- in code terminal use - npm init
- check package name, can add description, entry point(server.js), author and license (MIT)

Step 2:
- install regular dependencies
- npm i express express-validator bcryptjs config gravatar jsonwebtoken mongoose request
- bcryptjs: password encryption
  config: global variables
  gravatar: profile avatars
  request: for http requests mainly for github repos on the social media
- install dev dependencies
- npm i -D nodemon concurrently
  nodemon: watches server, dont have to refresh after every change
  concurrently: allow backend express server and frontend react server to run together 

Step 3:
- Create entry file called server.js (see file for details)

Step 4:
- Update scripts
- In package.json - change "test" to "start" - and start script is just going to run "node server" - 
  this is what will be used by heroku
- for development - create a script called "server" that uses "nodemon server"
- later - "client" script will run react and "dev" script that will run both (concurrently)

Step 5:
- Test the server
- In terminal - npm run server - this will start nodemon
- In postman - get http://localhost:5000 to test if express server is running

-----------------------------------------------------------------------------------------------------

Connecting to MongoDB using mongoose
Step 1:
- Get the connection details from Atlas
- Create a config folder with a default.json file and add mongo URI
- Create a db.js file for connection to db and import the function in server.js

Step 2:
- npm run server to test if mongo is connecting

-----------------------------------------------------------------------------------------------------

Route files with express
Step 1:
- create files where we will create all of our routes
- breaking it down to the following resources: users, auth, profile, post
- each of these routes will be a js file under routes folder
- bring in express router to each of these files instead of cluttering everything to the server.js file
- after populating these files with the routes, import them into server.js using app.use

Step 2:
- run the server
- go to postman - get http://localhost:5000/api/users and so on and test the reponse

Step 3:
- in postman - divide the resources into collections